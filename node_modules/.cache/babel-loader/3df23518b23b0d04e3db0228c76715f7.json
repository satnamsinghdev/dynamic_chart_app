{"ast":null,"code":"var _jsxFileName = \"/home/sp/Desktop/chart-test-app/src/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Title, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Chart() {\n  _s();\n\n  const [filterData, setFilterData] = useState(dataNew);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {},\n      title: {\n        display: true,\n        text: \"Chart.js Line Chart\"\n      }\n    }\n  };\n  const labels = filterData.map(data => {\n    return data.Date;\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Volume\",\n      data: filterData.map(data => {\n        return data.Volume;\n      }),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"Adj Close\",\n      data: filterData.map(data => {\n        return data[\"Adj Close\"];\n      }),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 1)'\n    }]\n  }; //   let minDataValue = Math.min(mostNegativeValue, options.suggestedMin);\n  //   let maxDataValue = Math.max(mostPositiveValue, options.suggestedMax);\n\n  console.log(\"data\", data);\n  useEffect(() => {});\n\n  const handleDay = () => {\n    const today = new Date();\n    const date = today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear();\n    const newDate = moment(date).format('MM-DD-YYYY');\n    const filterDataValue = dataNew.filter(result => {\n      if (result.Date == newDate) {\n        return result;\n      }\n    });\n    setFilterData(filterDataValue);\n    console.log(\"filterDataValue\", filterDataValue);\n  };\n\n  const handleWeek = () => {\n    var curr = new Date();\n    var firstday = new Date(curr.setDate(curr.getDate() - curr.getDay()));\n    var lastday = new Date(curr.setDate(curr.getDate() - curr.getDay() + 6));\n    const firstdayNew = moment(firstday).format('MM-DD-YYYY');\n    const lastdayNew = moment(lastday).format('MM-DD-YYYY');\n    const filterDataValue = dataNew.filter(result => {\n      var dateFrom = firstdayNew;\n      var dateTo = lastdayNew;\n      var dateCheck = result.Date;\n      var d1 = dateFrom.split(\"-\");\n      var d2 = dateTo.split(\"-\");\n      var c = dateCheck.split(\"-\");\n      var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]); // -1 because months are from 0 to 11\n\n      var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n      var check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n      if (check > from && check < to) {\n        return result;\n      }\n    });\n    setFilterData(filterDataValue);\n    console.log(\"filterDataValue\", filterDataValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFilterData(dataNew),\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"8r+pDuNhHsRwz+tET+ZHrPjJ7ec=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/sp/Desktop/chart-test-app/src/Chart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Title","Legend","Line","dataNew","moment","register","filterData","setFilterData","options","responsive","plugins","legend","title","display","text","labels","map","data","Date","datasets","label","Volume","borderColor","backgroundColor","console","log","handleDay","today","date","getMonth","getDate","getFullYear","newDate","format","filterDataValue","filter","result","handleWeek","curr","firstday","setDate","getDay","lastday","firstdayNew","lastdayNew","dateFrom","dateTo","dateCheck","d1","split","d2","c","from","parseInt","to","check"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n    Legend\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nexport default function Chart() {\n    const [filterData, setFilterData] = useState(dataNew);\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n          },\n          title: {\n            display: true,\n            text: \"Chart.js Line Chart\"\n          }\n        }\n      };\n      const labels = filterData.map((data) => {\n        return data.Date;\n      });\n      \n       const data = {\n        labels,\n        datasets: [\n          {\n            label: \"Volume\",\n            data: filterData.map((data) => {\n              return data.Volume;\n            }),\n            borderColor: \"rgb(255, 99, 132)\",\n            backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n          },\n          {\n            label: \"Adj Close\",\n            data: filterData.map((data) => {\n              return data[\"Adj Close\"];\n            }),\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 1)',\n          }\n        ]\n      };\n\n    //   let minDataValue = Math.min(mostNegativeValue, options.suggestedMin);\n    //   let maxDataValue = Math.max(mostPositiveValue, options.suggestedMax);\n      console.log(\"data\", data)\n\n      useEffect(() => {\n\n      });\n  \n     const  handleDay = () =>{\n      const today = new Date();\n      const date = (today.getMonth()+1)+'-'+today.getDate()+'-'+today.getFullYear();\n      const newDate= moment(date).format('MM-DD-YYYY');\n      const filterDataValue =dataNew.filter((result)=>{\n    if (result.Date == newDate){\n      return result;\n    }\n  })\n  setFilterData(filterDataValue);\n  console.log(\"filterDataValue\", filterDataValue)\n    }\n\n    const  handleWeek = ( ) =>{\n      var curr = new Date;\n      var firstday = new Date(curr.setDate(curr.getDate() - curr.getDay()));\n      var lastday = new Date(curr.setDate(curr.getDate() - curr.getDay()+6));\n      const firstdayNew= moment(firstday).format('MM-DD-YYYY');\n      const lastdayNew= moment(lastday).format('MM-DD-YYYY');\n  \n      const filterDataValue =dataNew.filter((result)=>{\n        var dateFrom = firstdayNew;\n        var dateTo = lastdayNew;\n        var dateCheck = result.Date;\n        \n        var d1 = dateFrom.split(\"-\");\n        var d2 = dateTo.split(\"-\");\n        var c = dateCheck.split(\"-\");\n        \n        var from = new Date(d1[2], parseInt(d1[1])-1, d1[0]);  // -1 because months are from 0 to 11\n        var to   = new Date(d2[2], parseInt(d2[1])-1, d2[0]);\n        var check = new Date(c[2], parseInt(c[1])-1, c[0]);\n  \n        if (check > from && check < to) {\n          return result;\n        }\n\n      });\n      setFilterData(filterDataValue);\n      console.log(\"filterDataValue\", filterDataValue)\n    }\n      \n\n      return (\n          <>\n        <Line options={options} data={data} />\n        {/* <button onClick={() => handleDay()} > 1 day</button> */}\n        {/* <button onClick={() => handleWeek()} > 1 week</button> */}\n        \n        <button onClick={() => setFilterData(dataNew)} >Refresh</button>\n          </>\n      )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}