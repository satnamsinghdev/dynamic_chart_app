{"ast":null,"code":"var _jsxFileName = \"/home/sp/Desktop/chart-test-app/src/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Title, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Chart() {\n  _s();\n\n  const [filterData, setFilterData] = useState(dataNew);\n  const [message, setMessage] = useState('');\n  const [dateCounter, setDateCounter] = useState(1);\n  const slot = [\"1992-05-02\", '1998-02-03', '2004-09-21', \"2009-02-10\", \"2022-04-01\"];\n  const [timeOutVar, setTimeOutVar] = useState(0);\n\n  const dataSlicer = (counter, dataSlot, data) => {\n    let startDate = new Date(dataSlot[0]).getTime();\n    let endDate = new Date(dataSlot[counter]).getTime();\n\n    if (startDate && endDate) {\n      let findData = data.filter(item => {\n        let itemDate = new Date(item.Date).getTime();\n\n        if (itemDate >= startDate && itemDate <= endDate) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return findData;\n    } else {\n      return [];\n    }\n  };\n\n  console.log('counter', dateCounter);\n  const [newData, setNewData] = useState(dataSlicer(dateCounter, slot, filterData));\n\n  function dataFilterTimeout() {\n    let localCounter = dateCounter + 1;\n    setTimeOutVar(setInterval(() => {\n      let data = dataSlicer(localCounter, slot, filterData);\n      let filteredData = data.length ? data : newData;\n      console.log(\"filtered\", filteredData);\n      setNewData(filteredData);\n      setDateCounter(localCounter++);\n      setMessage();\n    }, 5000));\n  }\n\n  useEffect(() => {\n    if (dateCounter >= slot.length - 1 && timeOutVar) {\n      clearInterval(timeOutVar);\n    }\n\n    if (dateCounter === 1) {\n      dataFilterTimeout();\n    }\n  }, [dateCounter]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {},\n      title: {\n        display: true,\n        text: \"Chart.js Line Chart\"\n      }\n    }\n  };\n  const labels = newData.map(data => {\n    return data.Date;\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Volume\",\n      data: newData.map(data => {\n        return data.Volume;\n      }),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"Adj Close\",\n      data: newData.map(data => {\n        return data[\"Adj Close\"];\n      }),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 1)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Date Span From \", slot[0], \" To \", slot[dateCounter]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"k+Yy+HwXZcVn/SRbLNAu31c5NZs=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/sp/Desktop/chart-test-app/src/Chart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Title","Legend","Line","dataNew","moment","register","filterData","setFilterData","message","setMessage","dateCounter","setDateCounter","slot","timeOutVar","setTimeOutVar","dataSlicer","counter","dataSlot","data","startDate","Date","getTime","endDate","findData","filter","item","itemDate","console","log","newData","setNewData","dataFilterTimeout","localCounter","setInterval","filteredData","length","clearInterval","options","responsive","plugins","legend","title","display","text","labels","map","datasets","label","Volume","borderColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n    Legend\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nexport default function Chart() {\n    const [filterData, setFilterData] = useState(dataNew);\n   const [message, setMessage] = useState('')\n    const [dateCounter,setDateCounter] = useState(1);\n    const slot =[\"1992-05-02\",'1998-02-03','2004-09-21',\"2009-02-10\",\"2022-04-01\"];\n    const [timeOutVar ,setTimeOutVar] = useState(0);\n    \n    \n\n    const dataSlicer=(counter,dataSlot,data)=>{\n        let startDate = new Date(dataSlot[0]).getTime();\n        let endDate = new Date(dataSlot[counter]).getTime();\n        if(startDate && endDate){\n\n            let findData = data.filter((item)=>{\n                let itemDate = new Date(item.Date).getTime();\n                if(itemDate >= startDate && itemDate <= endDate){\n\n                    return true;\n                }else{\n\n                    return false;\n                }\n\n            })\n\n            \n            return findData;\n\n        }else{\n            return [];\n        }\n    }\n    console.log('counter',dateCounter );\n\n    const [newData, setNewData] = useState(dataSlicer(dateCounter,slot,filterData));\n\n    function dataFilterTimeout(){\n        let localCounter = dateCounter+1;\n        setTimeOutVar(setInterval(() => { \n            let data = dataSlicer(localCounter,slot,filterData); \n            let filteredData = data.length?data:newData;\n            console.log(\"filtered\",filteredData);\n            setNewData(filteredData);\n            setDateCounter(localCounter++);\n            setMessage()\n\n\n\n        }, 5000));\n      }\n\n    useEffect(()=>{\n\n\n        if(dateCounter >= slot.length-1 && timeOutVar){\n       \n            clearInterval(timeOutVar);\n\n        }\n\n        if (dateCounter === 1){\n            dataFilterTimeout();\n        }    \n        \n\n\n    },[dateCounter]);\n\n\n\n    \n\n\n\n\n\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n          },\n          title: {\n            display: true,\n            text: \"Chart.js Line Chart\"\n          }\n        }\n      };\n      const labels = newData.map((data) => {\n        return data.Date;\n      });\n      \n       const data = {\n        labels,\n        datasets: [\n          {\n            label: \"Volume\",\n            data: newData.map((data) => {\n              return data.Volume;\n            }),\n            borderColor: \"rgb(255, 99, 132)\",\n            backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n          },\n          {\n            label: \"Adj Close\",\n            data: newData.map((data) => {\n              return data[\"Adj Close\"];\n            }),\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 1)',\n          }\n        ],\n      };\n\n    \n\n      return (<>\n      <h2>Date Span From {slot[0]} To {slot[dateCounter]}</h2>\n      <Line options={options} data={data} />\n       \n      </>);\n\n\n\n}"]},"metadata":{},"sourceType":"module"}