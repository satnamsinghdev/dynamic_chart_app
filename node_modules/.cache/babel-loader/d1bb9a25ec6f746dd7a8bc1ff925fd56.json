{"ast":null,"code":"var _jsxFileName = \"/home/sp/Desktop/chart-test-app/src/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Title, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Chart() {\n  _s();\n\n  const [filterData, setFilterData] = useState(dataNew);\n  const [newData, setNewData] = useState([]);\n  const [dateCounter, setDateCounter] = useState(1);\n  const slot = [\"1992-05-02\", '1998-02-03', '2004-09-21', \"2009-02-10\", \"2022-04-01\"];\n\n  const dataSlicer = (counter, dataSlot, data) => {\n    let startDate = new Date(dataSlot[0]).getTime();\n    let endDate = new Date(dataSlot[counter]).getTime();\n\n    if (startDate && endDate) {\n      let findData = data.filter(item => {\n        let itemDate = new Date(item.Date).getTime();\n\n        if (itemDate >= startDate && itemDate <= endDate) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return findData;\n    } else {\n      return [];\n    }\n  };\n\n  console.log('counter', dateCounter);\n  var timeOutVar;\n\n  function dataFilterTimeout() {\n    timeOutVar = setInterval(() => {\n      let data = dataSlicer(dateCounter, slot, filterData);\n      let filteredData = data.length ? data : newData;\n      setNewData(filteredData);\n      return setDateCounter(dateCounter);\n    }, 3000);\n  }\n\n  useEffect(() => {\n    if (dateCounter >= slot.length && timeOutVar) {\n      console.log('clearInterval');\n      clearInterval(timeOutVar);\n    } // if (dateCounter === 1){\n    //     dataFilterTimeout();\n    // }    \n\n  }, [dateCounter]);\n  var myTime;\n\n  function alertTimeout() {\n    let inc = 1;\n    myTime = setInterval(() => {\n      console.log(\"counter time\", inc++);\n    }, 3000);\n  }\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {},\n      title: {\n        display: true,\n        text: \"Chart.js Line Chart\"\n      }\n    }\n  };\n  const labels = newData.map(data => {\n    return data.Date;\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Volume\",\n      data: newData.map(data => {\n        return data.Volume;\n      }),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"Adj Close\",\n      data: newData.map(data => {\n        return data[\"Adj Close\"];\n      }),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 1)'\n    }],\n    scales: {\n      x: {\n        suggestedMin: 0,\n        suggestedMax: 69\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => alertTimeout(),\n      children: \" jfkdjfkldjklaj;\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"trm9d9o3YeOr9O87JSMV/50T9qs=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/sp/Desktop/chart-test-app/src/Chart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Title","Legend","Line","dataNew","moment","register","filterData","setFilterData","newData","setNewData","dateCounter","setDateCounter","slot","dataSlicer","counter","dataSlot","data","startDate","Date","getTime","endDate","findData","filter","item","itemDate","console","log","timeOutVar","dataFilterTimeout","setInterval","filteredData","length","clearInterval","myTime","alertTimeout","inc","options","responsive","plugins","legend","title","display","text","labels","map","datasets","label","Volume","borderColor","backgroundColor","scales","x","suggestedMin","suggestedMax"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n    Legend\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nexport default function Chart() {\n    const [filterData, setFilterData] = useState(dataNew);\n    const [newData, setNewData] = useState([]);\n    const [dateCounter,setDateCounter] = useState(1);\n    const slot =[\"1992-05-02\",'1998-02-03','2004-09-21',\"2009-02-10\",\"2022-04-01\"];\n    \n\n    const dataSlicer=(counter,dataSlot,data)=>{\n        let startDate = new Date(dataSlot[0]).getTime();\n        let endDate = new Date(dataSlot[counter]).getTime();\n        if(startDate && endDate){\n\n            let findData = data.filter((item)=>{\n                let itemDate = new Date(item.Date).getTime();\n                if(itemDate >= startDate && itemDate <= endDate){\n\n                    return true;\n                }else{\n\n                    return false;\n                }\n\n            })\n\n            \n            return findData;\n\n        }else{\n            return [];\n        }\n    }\n    console.log('counter',dateCounter );\n    var timeOutVar;\n    function dataFilterTimeout(){\n        timeOutVar = setInterval(() => { \n            let data = dataSlicer(dateCounter,slot,filterData); \n            let filteredData = data.length?data:newData;\n            setNewData(filteredData);\n            \n            return setDateCounter(dateCounter);\n\n\n        }, 3000);\n      }\n\n    useEffect(()=>{\n        if(dateCounter >= slot.length && timeOutVar){\n            console.log('clearInterval');\n            clearInterval(timeOutVar);\n\n        }\n\n        // if (dateCounter === 1){\n        //     dataFilterTimeout();\n        // }    \n        \n\n\n    },[dateCounter]);\n\n    var myTime ;\n\n    function alertTimeout(){\n        let inc = 1;\n        myTime = setInterval(()=>{\n            console.log(\"counter time\",inc++);\n\n        },3000)\n\n    }\n\n    \n\n\n\n\n\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n          },\n          title: {\n            display: true,\n            text: \"Chart.js Line Chart\"\n          }\n        }\n      };\n      const labels = newData.map((data) => {\n        return data.Date;\n      });\n      \n       const data = {\n        labels,\n        datasets: [\n          {\n            label: \"Volume\",\n            data: newData.map((data) => {\n              return data.Volume;\n            }),\n            borderColor: \"rgb(255, 99, 132)\",\n            backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n          },\n          {\n            label: \"Adj Close\",\n            data: newData.map((data) => {\n              return data[\"Adj Close\"];\n            }),\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 1)',\n          }\n        ],\n        scales: {\n            x: {\n             suggestedMin: 0,\n             suggestedMax: 69\n            }\n        }\n      };\n\n    \n\n      return (<><Line options={options} data={data} />\n        <button onClick={()=> alertTimeout()}> jfkdjfkldjklaj;</button>\n      </>);\n\n\n\n}"]},"metadata":{},"sourceType":"module"}