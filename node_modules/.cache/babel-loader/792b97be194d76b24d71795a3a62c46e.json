{"ast":null,"code":"var _jsxFileName = \"/home/sp/Desktop/chart-test-app/src/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Title, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Chart() {\n  _s();\n\n  const [filterData, setFilterData] = useState(dataNew);\n  const [newData, setNewData] = useState([]);\n  const [dateCounter, setDateCounter] = useState(1);\n  const slot = [\"05-02-1992\", '02-03-1998', '21-09-2004', \"02-10-2009\", \"04-01-2022\"];\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {},\n      title: {\n        display: true,\n        text: \"Chart.js Line Chart\"\n      }\n    }\n  };\n  const labels = newData.map(data => {\n    return data.Date;\n  }); // let maxDataValue = Math.max(mostPositiveValue, options.suggestedMax);\n\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Volume\",\n      data: newData.map(data => {\n        return data.Volume;\n      }),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"Adj Close\",\n      data: newData.map(data => {\n        return data[\"Adj Close\"];\n      }),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 1)'\n    }],\n    scales: {\n      x: {\n        suggestedMin: 0,\n        suggestedMax: 69\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 15\n  }, this);\n}\n\n_s(Chart, \"WVmGDmo+VzhjANBH13g4fK0Re4Q=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/sp/Desktop/chart-test-app/src/Chart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Title","Legend","Line","dataNew","moment","register","filterData","setFilterData","newData","setNewData","dateCounter","setDateCounter","slot","options","responsive","plugins","legend","title","display","text","labels","map","data","Date","datasets","label","Volume","borderColor","backgroundColor","scales","x","suggestedMin","suggestedMax"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACIC,KAAK,IAAIC,OADb,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,YAJJ,EAKIC,WALJ,EAMIC,OANJ,EAOIC,KAPJ,EAQIC,MARJ,QASO,UATP;AAUA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEAV,OAAO,CAACW,QAAR,CACIV,aADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIE,KALJ,EAMID,OANJ,EAOIE,MAPJ;AAUA,eAAe,SAASR,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAACY,OAAD,CAA5C;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACmB,WAAD,EAAaC,cAAb,IAA+BpB,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAMqB,IAAI,GAAE,CAAC,YAAD,EAAc,YAAd,EAA2B,YAA3B,EAAwC,YAAxC,EAAqD,YAArD,CAAZ;AAEA,QAAMC,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,IADA;AAEZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,EADD;AAGPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE;AAFD;AAHA;AAFG,GAAhB;AAWE,QAAMC,MAAM,GAAGZ,OAAO,CAACa,GAAR,CAAaC,IAAD,IAAU;AACnC,WAAOA,IAAI,CAACC,IAAZ;AACD,GAFc,CAAf,CAjB0B,CAsBxB;;AAED,QAAMD,IAAI,GAAG;AACZF,IAAAA,MADY;AAEZI,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,QADT;AAEEH,MAAAA,IAAI,EAAEd,OAAO,CAACa,GAAR,CAAaC,IAAD,IAAU;AAC1B,eAAOA,IAAI,CAACI,MAAZ;AACD,OAFK,CAFR;AAKEC,MAAAA,WAAW,EAAE,mBALf;AAMEC,MAAAA,eAAe,EAAE;AANnB,KADQ,EASR;AACEH,MAAAA,KAAK,EAAE,WADT;AAEEH,MAAAA,IAAI,EAAEd,OAAO,CAACa,GAAR,CAAaC,IAAD,IAAU;AAC1B,eAAOA,IAAI,CAAC,WAAD,CAAX;AACD,OAFK,CAFR;AAKEK,MAAAA,WAAW,EAAE,uBALf;AAMEC,MAAAA,eAAe,EAAE;AANnB,KATQ,CAFE;AAoBZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,CAAC,EAAE;AACFC,QAAAA,YAAY,EAAE,CADZ;AAEFC,QAAAA,YAAY,EAAE;AAFZ;AADC;AApBI,GAAb;AA8BD,sBAAQ,QAAC,IAAD;AAAM,IAAA,OAAO,EAAEnB,OAAf;AAAwB,IAAA,IAAI,EAAES;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAR;AAIL;;GA1DuB7B,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n    Legend\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { dataNew } from './data';\nimport moment from \"moment\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nexport default function Chart() {\n    const [filterData, setFilterData] = useState(dataNew);\n    const [newData, setNewData] = useState([]);\n    const [dateCounter,setDateCounter] = useState(1);\n    const slot =[\"05-02-1992\",'02-03-1998','21-09-2004',\"02-10-2009\",\"04-01-2022\"];\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n          },\n          title: {\n            display: true,\n            text: \"Chart.js Line Chart\"\n          }\n        }\n      };\n      const labels = newData.map((data) => {\n        return data.Date;\n      });\n\n\n        // let maxDataValue = Math.max(mostPositiveValue, options.suggestedMax);\n      \n       const data = {\n        labels,\n        datasets: [\n          {\n            label: \"Volume\",\n            data: newData.map((data) => {\n              return data.Volume;\n            }),\n            borderColor: \"rgb(255, 99, 132)\",\n            backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n          },\n          {\n            label: \"Adj Close\",\n            data: newData.map((data) => {\n              return data[\"Adj Close\"];\n            }),\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 1)',\n          }\n        ],\n        scales: {\n            x: {\n             suggestedMin: 0,\n             suggestedMax: 69\n            }\n        }\n      };\n\n    \n\n      return (<Line options={options} data={data} />);\n\n\n\n}"]},"metadata":{},"sourceType":"module"}